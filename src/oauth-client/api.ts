/* tslint:disable */
/* eslint-disable */
/**
 * Firstline OAuth API
 * OAuth API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosInstance,
  AxiosPromise,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setSearchParams,
  toPathString,
} from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequestArgs, RequiredError } from './base';

/**
 *
 * @export
 * @interface ExchangeTokenResponseDto
 */
export interface ExchangeTokenResponseDto {
  /**
   *
   * @type {string}
   * @memberof ExchangeTokenResponseDto
   */
  id_token?: ExchangeTokenResponseDtoIdTokenEnum;
  /**
   *
   * @type {string}
   * @memberof ExchangeTokenResponseDto
   */
  access_token: string;
  /**
   *
   * @type {string}
   * @memberof ExchangeTokenResponseDto
   */
  refresh_token?: string;
}

export const ExchangeTokenResponseDtoIdTokenEnum = {
  AuthorizationCode: 'authorization_code',
  Implicit: 'implicit',
  RefreshToken: 'refresh_token',
  ClientCredentials: 'client_credentials',
  DeviceCode: 'device_code',
  Password: 'password',
  Mfa: 'mfa',
  FirstlineFpaSession: 'firstline://fpa_session',
} as const;

export type ExchangeTokenResponseDtoIdTokenEnum =
  (typeof ExchangeTokenResponseDtoIdTokenEnum)[keyof typeof ExchangeTokenResponseDtoIdTokenEnum];

/**
 *
 * @export
 * @interface RevokeTokenDto
 */
export interface RevokeTokenDto {
  /**
   *
   * @type {string}
   * @memberof RevokeTokenDto
   */
  refresh_token: string;
}

/**
 * OauthV3Api - axios parameter creator
 * @export
 */
export const OauthV3ApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {'authorization_code' | 'implicit' | 'refresh_token' | 'client_credentials' | 'device_code' | 'password' | 'mfa' | 'firstline://fpa_session'} grantType
     * @param {string} clientId
     * @param {Array<string>} scopes
     * @param {string} [clientSecret]
     * @param {string} [code]
     * @param {string} [codeVerifier]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {string} [audience]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchangeCodeForToken: async (
      grantType:
        | 'authorization_code'
        | 'implicit'
        | 'refresh_token'
        | 'client_credentials'
        | 'device_code'
        | 'password'
        | 'mfa'
        | 'firstline://fpa_session',
      clientId: string,
      scopes: Array<string>,
      clientSecret?: string,
      code?: string,
      codeVerifier?: string,
      redirectUri?: string,
      refreshToken?: string,
      audience?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'grantType' is not null or undefined
      assertParamExists('exchangeCodeForToken', 'grantType', grantType);
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists('exchangeCodeForToken', 'clientId', clientId);
      // verify required parameter 'scopes' is not null or undefined
      assertParamExists('exchangeCodeForToken', 'scopes', scopes);
      const localVarPath = `/v3/oauth/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (grantType !== undefined) {
        localVarQueryParameter['grant_type'] = grantType;
      }

      if (clientId !== undefined) {
        localVarQueryParameter['client_id'] = clientId;
      }

      if (clientSecret !== undefined) {
        localVarQueryParameter['client_secret'] = clientSecret;
      }

      if (code !== undefined) {
        localVarQueryParameter['code'] = code;
      }

      if (codeVerifier !== undefined) {
        localVarQueryParameter['code_verifier'] = codeVerifier;
      }

      if (redirectUri !== undefined) {
        localVarQueryParameter['redirect_uri'] = redirectUri;
      }

      if (refreshToken !== undefined) {
        localVarQueryParameter['refresh_token'] = refreshToken;
      }

      if (audience !== undefined) {
        localVarQueryParameter['audience'] = audience;
      }

      if (scopes) {
        localVarQueryParameter['scopes'] = scopes;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jwks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v3/.well-known/jwks.json`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {RevokeTokenDto} revokeTokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken: async (
      revokeTokenDto: RevokeTokenDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'revokeTokenDto' is not null or undefined
      assertParamExists('revokeToken', 'revokeTokenDto', revokeTokenDto);
      const localVarPath = `/v3/oauth/token/revoke`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        revokeTokenDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OauthV3Api - functional programming interface
 * @export
 */
export const OauthV3ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OauthV3ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {'authorization_code' | 'implicit' | 'refresh_token' | 'client_credentials' | 'device_code' | 'password' | 'mfa' | 'firstline://fpa_session'} grantType
     * @param {string} clientId
     * @param {Array<string>} scopes
     * @param {string} [clientSecret]
     * @param {string} [code]
     * @param {string} [codeVerifier]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {string} [audience]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exchangeCodeForToken(
      grantType:
        | 'authorization_code'
        | 'implicit'
        | 'refresh_token'
        | 'client_credentials'
        | 'device_code'
        | 'password'
        | 'mfa'
        | 'firstline://fpa_session',
      clientId: string,
      scopes: Array<string>,
      clientSecret?: string,
      code?: string,
      codeVerifier?: string,
      redirectUri?: string,
      refreshToken?: string,
      audience?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ExchangeTokenResponseDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.exchangeCodeForToken(
          grantType,
          clientId,
          scopes,
          clientSecret,
          code,
          codeVerifier,
          redirectUri,
          refreshToken,
          audience,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jwks(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.jwks(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {RevokeTokenDto} revokeTokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeToken(
      revokeTokenDto: RevokeTokenDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.revokeToken(
        revokeTokenDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * OauthV3Api - factory interface
 * @export
 */
export const OauthV3ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OauthV3ApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {'authorization_code' | 'implicit' | 'refresh_token' | 'client_credentials' | 'device_code' | 'password' | 'mfa' | 'firstline://fpa_session'} grantType
     * @param {string} clientId
     * @param {Array<string>} scopes
     * @param {string} [clientSecret]
     * @param {string} [code]
     * @param {string} [codeVerifier]
     * @param {string} [redirectUri]
     * @param {string} [refreshToken]
     * @param {string} [audience]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchangeCodeForToken(
      grantType:
        | 'authorization_code'
        | 'implicit'
        | 'refresh_token'
        | 'client_credentials'
        | 'device_code'
        | 'password'
        | 'mfa'
        | 'firstline://fpa_session',
      clientId: string,
      scopes: Array<string>,
      clientSecret?: string,
      code?: string,
      codeVerifier?: string,
      redirectUri?: string,
      refreshToken?: string,
      audience?: string,
      options?: any,
    ): AxiosPromise<ExchangeTokenResponseDto> {
      return localVarFp
        .exchangeCodeForToken(
          grantType,
          clientId,
          scopes,
          clientSecret,
          code,
          codeVerifier,
          redirectUri,
          refreshToken,
          audience,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jwks(options?: any): AxiosPromise<void> {
      return localVarFp
        .jwks(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {RevokeTokenDto} revokeTokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeToken(
      revokeTokenDto: RevokeTokenDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .revokeToken(revokeTokenDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OauthV3Api - interface
 * @export
 * @interface OauthV3Api
 */
export interface OauthV3ApiInterface {
  /**
   *
   * @summary
   * @param {'authorization_code' | 'implicit' | 'refresh_token' | 'client_credentials' | 'device_code' | 'password' | 'mfa' | 'firstline://fpa_session'} grantType
   * @param {string} clientId
   * @param {Array<string>} scopes
   * @param {string} [clientSecret]
   * @param {string} [code]
   * @param {string} [codeVerifier]
   * @param {string} [redirectUri]
   * @param {string} [refreshToken]
   * @param {string} [audience]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthV3ApiInterface
   */
  exchangeCodeForToken(
    grantType:
      | 'authorization_code'
      | 'implicit'
      | 'refresh_token'
      | 'client_credentials'
      | 'device_code'
      | 'password'
      | 'mfa'
      | 'firstline://fpa_session',
    clientId: string,
    scopes: Array<string>,
    clientSecret?: string,
    code?: string,
    codeVerifier?: string,
    redirectUri?: string,
    refreshToken?: string,
    audience?: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ExchangeTokenResponseDto>;

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthV3ApiInterface
   */
  jwks(options?: AxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {RevokeTokenDto} revokeTokenDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthV3ApiInterface
   */
  revokeToken(
    revokeTokenDto: RevokeTokenDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>;
}

/**
 * OauthV3Api - object-oriented interface
 * @export
 * @class OauthV3Api
 * @extends {BaseAPI}
 */
export class OauthV3Api extends BaseAPI implements OauthV3ApiInterface {
  /**
   *
   * @summary
   * @param {'authorization_code' | 'implicit' | 'refresh_token' | 'client_credentials' | 'device_code' | 'password' | 'mfa' | 'firstline://fpa_session'} grantType
   * @param {string} clientId
   * @param {Array<string>} scopes
   * @param {string} [clientSecret]
   * @param {string} [code]
   * @param {string} [codeVerifier]
   * @param {string} [redirectUri]
   * @param {string} [refreshToken]
   * @param {string} [audience]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthV3Api
   */
  public exchangeCodeForToken(
    grantType:
      | 'authorization_code'
      | 'implicit'
      | 'refresh_token'
      | 'client_credentials'
      | 'device_code'
      | 'password'
      | 'mfa'
      | 'firstline://fpa_session',
    clientId: string,
    scopes: Array<string>,
    clientSecret?: string,
    code?: string,
    codeVerifier?: string,
    redirectUri?: string,
    refreshToken?: string,
    audience?: string,
    options?: AxiosRequestConfig,
  ) {
    return OauthV3ApiFp(this.configuration)
      .exchangeCodeForToken(
        grantType,
        clientId,
        scopes,
        clientSecret,
        code,
        codeVerifier,
        redirectUri,
        refreshToken,
        audience,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthV3Api
   */
  public jwks(options?: AxiosRequestConfig) {
    return OauthV3ApiFp(this.configuration)
      .jwks(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {RevokeTokenDto} revokeTokenDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OauthV3Api
   */
  public revokeToken(
    revokeTokenDto: RevokeTokenDto,
    options?: AxiosRequestConfig,
  ) {
    return OauthV3ApiFp(this.configuration)
      .revokeToken(revokeTokenDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
