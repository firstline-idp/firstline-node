/* tslint:disable */
/* eslint-disable */
/**
 * Firstline Management API
 * Api for managing Apis, Applications and Users
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosInstance,
  AxiosPromise,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setSearchParams,
  toPathString,
} from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequestArgs, RequiredError } from './base';

/**
 *
 * @export
 * @interface ActivityAnalyticsDto
 */
export interface ActivityAnalyticsDto {
  /**
   *
   * @type {string}
   * @memberof ActivityAnalyticsDto
   */
  date: string;
  /**
   *
   * @type {number}
   * @memberof ActivityAnalyticsDto
   */
  totalActivities: number;
  /**
   *
   * @type {number}
   * @memberof ActivityAnalyticsDto
   */
  totalUsers: number;
}
/**
 *
 * @export
 * @interface ActivityAnalyticsResponseDto
 */
export interface ActivityAnalyticsResponseDto {
  /**
   *
   * @type {Array<ActivityAnalyticsDto>}
   * @memberof ActivityAnalyticsResponseDto
   */
  data: Array<ActivityAnalyticsDto>;
}
/**
 *
 * @export
 * @interface AddMemberDto
 */
export interface AddMemberDto {
  /**
   *
   * @type {object}
   * @memberof AddMemberDto
   */
  userId: object;
}
/**
 *
 * @export
 * @interface AddRoleDto
 */
export interface AddRoleDto {
  /**
   *
   * @type {object}
   * @memberof AddRoleDto
   */
  role_id: object;
}
/**
 *
 * @export
 * @interface ApiDto
 */
export interface ApiDto {
  /**
   *
   * @type {string}
   * @memberof ApiDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof ApiDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ApiDto
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ApiDto
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof ApiDto
   */
  signingAlgorithm: ApiDtoSigningAlgorithmEnum;
  /**
   *
   * @type {number}
   * @memberof ApiDto
   */
  accessTokenDuration: number;
  /**
   *
   * @type {number}
   * @memberof ApiDto
   */
  reducedAccessTokenDuration: number;
  /**
   *
   * @type {Array<PermissionDto>}
   * @memberof ApiDto
   */
  permissions: Array<PermissionDto>;
  /**
   *
   * @type {boolean}
   * @memberof ApiDto
   */
  managed: boolean;
}

export const ApiDtoSigningAlgorithmEnum = {
  Rs256: 'RS256',
  Hs256: 'HS256',
} as const;

export type ApiDtoSigningAlgorithmEnum =
  (typeof ApiDtoSigningAlgorithmEnum)[keyof typeof ApiDtoSigningAlgorithmEnum];

/**
 *
 * @export
 * @interface ApplicationDto
 */
export interface ApplicationDto {
  /**
   *
   * @type {string}
   * @memberof ApplicationDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationDto
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationDto
   */
  secret: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationDto
   */
  applicationType: ApplicationDtoApplicationTypeEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationDto
   */
  redirectUris: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationDto
   */
  logoutUris: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationDto
   */
  corsOrigins: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationDto
   */
  webOrigins: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ApplicationDto
   */
  idTokenDuration: number;
  /**
   *
   * @type {number}
   * @memberof ApplicationDto
   */
  refreshTokenDuration: number;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationDto
   */
  grantTypes: Array<ApplicationDtoGrantTypesEnum>;
  /**
   *
   * @type {boolean}
   * @memberof ApplicationDto
   */
  isFirstPartyApplication: boolean;
  /**
   *
   * @type {Array<ApplicationGrantDto>}
   * @memberof ApplicationDto
   */
  applicationGrants: Array<ApplicationGrantDto>;
}

export const ApplicationDtoApplicationTypeEnum = {
  Spa: 'SPA',
  Native: 'NATIVE',
  M2M: 'M2M',
  Rwa: 'RWA',
} as const;

export type ApplicationDtoApplicationTypeEnum =
  (typeof ApplicationDtoApplicationTypeEnum)[keyof typeof ApplicationDtoApplicationTypeEnum];
export const ApplicationDtoGrantTypesEnum = {
  AuthorizationCode: 'authorization_code',
  Implicit: 'implicit',
  RefreshToken: 'refresh_token',
  ClientCredentials: 'client_credentials',
  DeviceCode: 'device_code',
  Password: 'password',
  Mfa: 'mfa',
  FirstlineFpaSession: 'firstline://fpa_session',
} as const;

export type ApplicationDtoGrantTypesEnum =
  (typeof ApplicationDtoGrantTypesEnum)[keyof typeof ApplicationDtoGrantTypesEnum];

/**
 *
 * @export
 * @interface ApplicationGrantDto
 */
export interface ApplicationGrantDto {
  /**
   *
   * @type {string}
   * @memberof ApplicationGrantDto
   */
  apiId: string;
  /**
   *
   * @type {string}
   * @memberof ApplicationGrantDto
   */
  applicationId: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ApplicationGrantDto
   */
  scopes: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ApplicationGrantDto
   */
  expiresAt: string;
}
/**
 *
 * @export
 * @interface BillingSettingsDto
 */
export interface BillingSettingsDto {
  /**
   *
   * @type {boolean}
   * @memberof BillingSettingsDto
   */
  activated: boolean;
  /**
   *
   * @type {string}
   * @memberof BillingSettingsDto
   */
  tier: BillingSettingsDtoTierEnum;
  /**
   *
   * @type {string}
   * @memberof BillingSettingsDto
   */
  stripeCustomerId: string;
  /**
   *
   * @type {string}
   * @memberof BillingSettingsDto
   */
  stripeSubscriptionId: string;
  /**
   *
   * @type {string}
   * @memberof BillingSettingsDto
   */
  stripeSubscriptionItemId: string;
  /**
   *
   * @type {string}
   * @memberof BillingSettingsDto
   */
  subscriptionActive: string;
}

export const BillingSettingsDtoTierEnum = {
  Free: 'FREE',
  StarterTier25K: 'STARTER_TIER_25K',
  StarterTier20K: 'STARTER_TIER_20K',
  StarterTier15K: 'STARTER_TIER_15K',
  StarterTier10K: 'STARTER_TIER_10K',
  StarterTier5K: 'STARTER_TIER_5K',
  Enterprise: 'ENTERPRISE',
} as const;

export type BillingSettingsDtoTierEnum =
  (typeof BillingSettingsDtoTierEnum)[keyof typeof BillingSettingsDtoTierEnum];

/**
 *
 * @export
 * @interface CreateApiDto
 */
export interface CreateApiDto {
  /**
   *
   * @type {string}
   * @memberof CreateApiDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateApiDto
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof CreateApiDto
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof CreateApiDto
   */
  signingAlgorithm: CreateApiDtoSigningAlgorithmEnum;
}

export const CreateApiDtoSigningAlgorithmEnum = {
  Rs256: 'RS256',
  Hs256: 'HS256',
} as const;

export type CreateApiDtoSigningAlgorithmEnum =
  (typeof CreateApiDtoSigningAlgorithmEnum)[keyof typeof CreateApiDtoSigningAlgorithmEnum];

/**
 *
 * @export
 * @interface CreateApplicationDto
 */
export interface CreateApplicationDto {
  /**
   *
   * @type {string}
   * @memberof CreateApplicationDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateApplicationDto
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof CreateApplicationDto
   */
  applicationType: CreateApplicationDtoApplicationTypeEnum;
  /**
   *
   * @type {boolean}
   * @memberof CreateApplicationDto
   */
  isFirstPartyApplication: boolean;
}

export const CreateApplicationDtoApplicationTypeEnum = {
  Spa: 'SPA',
  Native: 'NATIVE',
  M2M: 'M2M',
  Rwa: 'RWA',
} as const;

export type CreateApplicationDtoApplicationTypeEnum =
  (typeof CreateApplicationDtoApplicationTypeEnum)[keyof typeof CreateApplicationDtoApplicationTypeEnum];

/**
 *
 * @export
 * @interface CreateOrganisationDto
 */
export interface CreateOrganisationDto {
  /**
   *
   * @type {string}
   * @memberof CreateOrganisationDto
   */
  name: string;
}
/**
 *
 * @export
 * @interface CreatePermissionDto
 */
export interface CreatePermissionDto {
  /**
   *
   * @type {string}
   * @memberof CreatePermissionDto
   */
  scope: string;
  /**
   *
   * @type {string}
   * @memberof CreatePermissionDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof CreatePermissionDto
   */
  api: string;
}
/**
 *
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
  /**
   *
   * @type {string}
   * @memberof CreateRoleDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateRoleDto
   */
  description: string;
  /**
   *
   * @type {Array<object>}
   * @memberof CreateRoleDto
   */
  permissions?: Array<object>;
}
/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  password: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateUserDto
   */
  isEmailVerified: boolean;
}
/**
 *
 * @export
 * @interface EmailSettingsDto
 */
export interface EmailSettingsDto {
  /**
   *
   * @type {MailConfigSettingsDto}
   * @memberof EmailSettingsDto
   */
  config: MailConfigSettingsDto;
  /**
   *
   * @type {VerificationEmailSettingsDto}
   * @memberof EmailSettingsDto
   */
  verification: VerificationEmailSettingsDto;
  /**
   *
   * @type {ResetPasswordEmailSettingsDto}
   * @memberof EmailSettingsDto
   */
  resetPassword: ResetPasswordEmailSettingsDto;
  /**
   *
   * @type {InvitationEmailSettingsDto}
   * @memberof EmailSettingsDto
   */
  invitation: InvitationEmailSettingsDto;
}
/**
 *
 * @export
 * @interface FontDto
 */
export interface FontDto {
  /**
   *
   * @type {string}
   * @memberof FontDto
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof FontDto
   */
  name: string;
}
/**
 *
 * @export
 * @interface GeneralSettingsDto
 */
export interface GeneralSettingsDto {
  /**
   *
   * @type {string}
   * @memberof GeneralSettingsDto
   */
  domain: string;
}
/**
 *
 * @export
 * @interface GetActivityAnalyticsDto
 */
export interface GetActivityAnalyticsDto {
  /**
   *
   * @type {string}
   * @memberof GetActivityAnalyticsDto
   */
  start: string;
  /**
   *
   * @type {string}
   * @memberof GetActivityAnalyticsDto
   */
  end: string;
  /**
   *
   * @type {object}
   * @memberof GetActivityAnalyticsDto
   */
  userId: object;
  /**
   *
   * @type {string}
   * @memberof GetActivityAnalyticsDto
   */
  applicationId: string;
  /**
   *
   * @type {object}
   * @memberof GetActivityAnalyticsDto
   */
  unit: object;
}
/**
 *
 * @export
 * @interface InvitationEmailSettingsDto
 */
export interface InvitationEmailSettingsDto {
  /**
   *
   * @type {boolean}
   * @memberof InvitationEmailSettingsDto
   */
  activated: boolean;
  /**
   *
   * @type {number}
   * @memberof InvitationEmailSettingsDto
   */
  validFor: number;
  /**
   *
   * @type {string}
   * @memberof InvitationEmailSettingsDto
   */
  redirectUrl: string;
  /**
   *
   * @type {string}
   * @memberof InvitationEmailSettingsDto
   */
  subjectTemplate: string;
  /**
   *
   * @type {string}
   * @memberof InvitationEmailSettingsDto
   */
  textTemplate: string;
  /**
   *
   * @type {string}
   * @memberof InvitationEmailSettingsDto
   */
  htmlTemplate: string;
  /**
   *
   * @type {string}
   * @memberof InvitationEmailSettingsDto
   */
  templateId: string;
}
/**
 *
 * @export
 * @interface MailConfigSettingsDto
 */
export interface MailConfigSettingsDto {
  /**
   *
   * @type {string}
   * @memberof MailConfigSettingsDto
   */
  host: string;
  /**
   *
   * @type {number}
   * @memberof MailConfigSettingsDto
   */
  port: number;
  /**
   *
   * @type {string}
   * @memberof MailConfigSettingsDto
   */
  connectorType: MailConfigSettingsDtoConnectorTypeEnum;
  /**
   *
   * @type {string}
   * @memberof MailConfigSettingsDto
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof MailConfigSettingsDto
   */
  password: string;
  /**
   *
   * @type {boolean}
   * @memberof MailConfigSettingsDto
   */
  secure: boolean;
  /**
   *
   * @type {string}
   * @memberof MailConfigSettingsDto
   */
  from: string;
  /**
   *
   * @type {string}
   * @memberof MailConfigSettingsDto
   */
  fromName: string;
}

export const MailConfigSettingsDtoConnectorTypeEnum = {
  Classic: 'CLASSIC',
  Sendgrid: 'SENDGRID',
} as const;

export type MailConfigSettingsDtoConnectorTypeEnum =
  (typeof MailConfigSettingsDtoConnectorTypeEnum)[keyof typeof MailConfigSettingsDtoConnectorTypeEnum];

/**
 *
 * @export
 * @interface OAuthSettingsDto
 */
export interface OAuthSettingsDto {
  /**
   *
   * @type {number}
   * @memberof OAuthSettingsDto
   */
  totalSessionLifetime: number;
  /**
   *
   * @type {number}
   * @memberof OAuthSettingsDto
   */
  inactivitySessionLifetime: number;
}
/**
 *
 * @export
 * @interface OrganisationDto
 */
export interface OrganisationDto {
  /**
   *
   * @type {string}
   * @memberof OrganisationDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationDto
   */
  tenant?: string;
  /**
   *
   * @type {Array<UserDto>}
   * @memberof OrganisationDto
   */
  members: Array<UserDto>;
  /**
   *
   * @type {OrganisationSettingsDto}
   * @memberof OrganisationDto
   */
  settings: OrganisationSettingsDto;
}
/**
 *
 * @export
 * @interface OrganisationSettingsDto
 */
export interface OrganisationSettingsDto {
  /**
   *
   * @type {GeneralSettingsDto}
   * @memberof OrganisationSettingsDto
   */
  general: GeneralSettingsDto;
  /**
   *
   * @type {OAuthSettingsDto}
   * @memberof OrganisationSettingsDto
   */
  oauth: OAuthSettingsDto;
  /**
   *
   * @type {EmailSettingsDto}
   * @memberof OrganisationSettingsDto
   */
  emails: EmailSettingsDto;
  /**
   *
   * @type {WebhookSettingsDto}
   * @memberof OrganisationSettingsDto
   */
  webhook: WebhookSettingsDto;
  /**
   *
   * @type {UICustomizationSettingsDto}
   * @memberof OrganisationSettingsDto
   */
  uiCustomization: UICustomizationSettingsDto;
  /**
   *
   * @type {BillingSettingsDto}
   * @memberof OrganisationSettingsDto
   */
  billing: BillingSettingsDto;
}
/**
 *
 * @export
 * @interface PermissionDto
 */
export interface PermissionDto {
  /**
   *
   * @type {string}
   * @memberof PermissionDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof PermissionDto
   */
  scope: string;
  /**
   *
   * @type {string}
   * @memberof PermissionDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof PermissionDto
   */
  api: string;
  /**
   *
   * @type {boolean}
   * @memberof PermissionDto
   */
  managed: boolean;
}
/**
 *
 * @export
 * @interface RemoveMemberDto
 */
export interface RemoveMemberDto {
  /**
   *
   * @type {object}
   * @memberof RemoveMemberDto
   */
  userId: object;
}
/**
 *
 * @export
 * @interface ResetPasswordEmailSettingsDto
 */
export interface ResetPasswordEmailSettingsDto {
  /**
   *
   * @type {boolean}
   * @memberof ResetPasswordEmailSettingsDto
   */
  activated: boolean;
  /**
   *
   * @type {number}
   * @memberof ResetPasswordEmailSettingsDto
   */
  validFor: number;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordEmailSettingsDto
   */
  redirectUrl: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordEmailSettingsDto
   */
  subjectTemplate: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordEmailSettingsDto
   */
  textTemplate: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordEmailSettingsDto
   */
  htmlTemplate: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordEmailSettingsDto
   */
  templateId: string;
}
/**
 *
 * @export
 * @interface RoleDto
 */
export interface RoleDto {
  /**
   *
   * @type {string}
   * @memberof RoleDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof RoleDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof RoleDto
   */
  description: string;
  /**
   *
   * @type {Array<PermissionDto>}
   * @memberof RoleDto
   */
  permissions: Array<PermissionDto>;
}
/**
 *
 * @export
 * @interface UICustomizationSettingsDto
 */
export interface UICustomizationSettingsDto {
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  primaryColor: string;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  textColor: string;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  textColorLight: string;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  errorColor: string;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  successColor: string;
  /**
   *
   * @type {FontDto}
   * @memberof UICustomizationSettingsDto
   */
  font?: FontDto;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  urlLogo?: string;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  urlFavicon?: string;
  /**
   *
   * @type {boolean}
   * @memberof UICustomizationSettingsDto
   */
  agreementCheckbox: boolean;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  urlTerms?: string;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  urlPrivacy?: string;
  /**
   *
   * @type {boolean}
   * @memberof UICustomizationSettingsDto
   */
  username: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof UICustomizationSettingsDto
   */
  footer?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof UICustomizationSettingsDto
   */
  supportMail?: string;
}
/**
 *
 * @export
 * @interface UpdateApiDto
 */
export interface UpdateApiDto {
  /**
   *
   * @type {string}
   * @memberof UpdateApiDto
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateApiDto
   */
  description?: string;
  /**
   * @IsOptional()      identifier?: string;       signingAlgorithm?: SigningAlgorithm;
   * @type {number}
   * @memberof UpdateApiDto
   */
  accessTokenDuration?: number;
  /**
   *
   * @type {number}
   * @memberof UpdateApiDto
   */
  reducedAccessTokenDuration?: number;
}
/**
 *
 * @export
 * @interface UpdateApplicationDto
 */
export interface UpdateApplicationDto {
  /**
   *
   * @type {string}
   * @memberof UpdateApplicationDto
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateApplicationDto
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateApplicationDto
   */
  applicationType?: UpdateApplicationDtoApplicationTypeEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateApplicationDto
   */
  redirectUris?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateApplicationDto
   */
  logoutUris?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateApplicationDto
   */
  corsOrigins?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateApplicationDto
   */
  webOrigins?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof UpdateApplicationDto
   */
  idTokenDuration?: number;
  /**
   *
   * @type {number}
   * @memberof UpdateApplicationDto
   */
  refreshTokenDuration?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateApplicationDto
   */
  grantTypes?: Array<UpdateApplicationDtoGrantTypesEnum>;
  /**
   *
   * @type {Array<ApplicationGrantDto>}
   * @memberof UpdateApplicationDto
   */
  applicationGrants: Array<ApplicationGrantDto>;
}

export const UpdateApplicationDtoApplicationTypeEnum = {
  Spa: 'SPA',
  Native: 'NATIVE',
  M2M: 'M2M',
  Rwa: 'RWA',
} as const;

export type UpdateApplicationDtoApplicationTypeEnum =
  (typeof UpdateApplicationDtoApplicationTypeEnum)[keyof typeof UpdateApplicationDtoApplicationTypeEnum];
export const UpdateApplicationDtoGrantTypesEnum = {
  AuthorizationCode: 'authorization_code',
  Implicit: 'implicit',
  RefreshToken: 'refresh_token',
  ClientCredentials: 'client_credentials',
  DeviceCode: 'device_code',
  Password: 'password',
  Mfa: 'mfa',
  FirstlineFpaSession: 'firstline://fpa_session',
} as const;

export type UpdateApplicationDtoGrantTypesEnum =
  (typeof UpdateApplicationDtoGrantTypesEnum)[keyof typeof UpdateApplicationDtoGrantTypesEnum];

/**
 *
 * @export
 * @interface UpdatePermissionDto
 */
export interface UpdatePermissionDto {
  /**
   *
   * @type {string}
   * @memberof UpdatePermissionDto
   */
  scope: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePermissionDto
   */
  description: string;
}
/**
 *
 * @export
 * @interface UpdateRoleDto
 */
export interface UpdateRoleDto {
  /**
   *
   * @type {string}
   * @memberof UpdateRoleDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdateRoleDto
   */
  description: string;
  /**
   *
   * @type {Array<object>}
   * @memberof UpdateRoleDto
   */
  permissions?: Array<object>;
}
/**
 *
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  password?: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateUserDto
   */
  isEmailVerified?: boolean;
  /**
   * @IsOptional()         applicationGrants?: UpdateApplicationGrantDto[];
   * @type {Array<object>}
   * @memberof UpdateUserDto
   */
  roles?: Array<object>;
}
/**
 *
 * @export
 * @interface UserActivityDto
 */
export interface UserActivityDto {
  /**
   *
   * @type {string}
   * @memberof UserActivityDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof UserActivityDto
   */
  organisation: string;
  /**
   *
   * @type {string}
   * @memberof UserActivityDto
   */
  application?: string;
  /**
   *
   * @type {string}
   * @memberof UserActivityDto
   */
  user: string;
  /**
   *
   * @type {string}
   * @memberof UserActivityDto
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof UserActivityDto
   */
  recordedAt: string;
}
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  username?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserDto
   */
  isEmailVerified: boolean;
  /**
   *
   * @type {Array<ApplicationGrantDto>}
   * @memberof UserDto
   */
  applicationGrants: Array<ApplicationGrantDto>;
  /**
   *
   * @type {Array<RoleDto>}
   * @memberof UserDto
   */
  roles: Array<RoleDto>;
  /**
   *
   * @type {Array<OrganisationDto>}
   * @memberof UserDto
   */
  organisations: Array<OrganisationDto>;
  /**
   *
   * @type {UserActivityDto}
   * @memberof UserDto
   */
  lastActivity?: UserActivityDto;
}
/**
 *
 * @export
 * @interface VerificationEmailSettingsDto
 */
export interface VerificationEmailSettingsDto {
  /**
   *
   * @type {string}
   * @memberof VerificationEmailSettingsDto
   */
  type: VerificationEmailSettingsDtoTypeEnum;
  /**
   *
   * @type {boolean}
   * @memberof VerificationEmailSettingsDto
   */
  activated: boolean;
  /**
   *
   * @type {number}
   * @memberof VerificationEmailSettingsDto
   */
  validFor: number;
  /**
   *
   * @type {string}
   * @memberof VerificationEmailSettingsDto
   */
  redirectUrl: string;
  /**
   *
   * @type {string}
   * @memberof VerificationEmailSettingsDto
   */
  subjectTemplate: string;
  /**
   *
   * @type {string}
   * @memberof VerificationEmailSettingsDto
   */
  textTemplate: string;
  /**
   *
   * @type {string}
   * @memberof VerificationEmailSettingsDto
   */
  htmlTemplate: string;
  /**
   *
   * @type {string}
   * @memberof VerificationEmailSettingsDto
   */
  templateId: string;
}

export const VerificationEmailSettingsDtoTypeEnum = {
  Code: 'code',
  Link: 'link',
} as const;

export type VerificationEmailSettingsDtoTypeEnum =
  (typeof VerificationEmailSettingsDtoTypeEnum)[keyof typeof VerificationEmailSettingsDtoTypeEnum];

/**
 *
 * @export
 * @interface WebhookSettingsDto
 */
export interface WebhookSettingsDto {
  /**
   *
   * @type {string}
   * @memberof WebhookSettingsDto
   */
  url: string;
  /**
   *
   * @type {string}
   * @memberof WebhookSettingsDto
   */
  apiKey?: string;
  /**
   *
   * @type {string}
   * @memberof WebhookSettingsDto
   */
  apiKeyHeader?: string;
}

/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivitiesByUser: async (
      userId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getActivitiesByUser', 'userId', userId);
      const localVarPath = `/analytics/activities/{userId}`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {GetActivityAnalyticsDto} getActivityAnalyticsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityAnalytics: async (
      getActivityAnalyticsDto: GetActivityAnalyticsDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'getActivityAnalyticsDto' is not null or undefined
      assertParamExists(
        'getActivityAnalytics',
        'getActivityAnalyticsDto',
        getActivityAnalyticsDto,
      );
      const localVarPath = `/analytics/activities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        getActivityAnalyticsDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AnalyticsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getActivitiesByUser(
      userId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<UserActivityDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getActivitiesByUser(userId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {GetActivityAnalyticsDto} getActivityAnalyticsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getActivityAnalytics(
      getActivityAnalyticsDto: GetActivityAnalyticsDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ActivityAnalyticsResponseDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getActivityAnalytics(
          getActivityAnalyticsDto,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AnalyticsApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivitiesByUser(
      userId: string,
      options?: any,
    ): AxiosPromise<Array<UserActivityDto>> {
      return localVarFp
        .getActivitiesByUser(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {GetActivityAnalyticsDto} getActivityAnalyticsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityAnalytics(
      getActivityAnalyticsDto: GetActivityAnalyticsDto,
      options?: any,
    ): AxiosPromise<ActivityAnalyticsResponseDto> {
      return localVarFp
        .getActivityAnalytics(getActivityAnalyticsDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AnalyticsApi - interface
 * @export
 * @interface AnalyticsApi
 */
export interface AnalyticsApiInterface {
  /**
   *
   * @summary
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnalyticsApiInterface
   */
  getActivitiesByUser(
    userId: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<UserActivityDto>>;

  /**
   *
   * @summary
   * @param {GetActivityAnalyticsDto} getActivityAnalyticsDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnalyticsApiInterface
   */
  getActivityAnalytics(
    getActivityAnalyticsDto: GetActivityAnalyticsDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ActivityAnalyticsResponseDto>;
}

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI implements AnalyticsApiInterface {
  /**
   *
   * @summary
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnalyticsApi
   */
  public getActivitiesByUser(userId: string, options?: AxiosRequestConfig) {
    return AnalyticsApiFp(this.configuration)
      .getActivitiesByUser(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {GetActivityAnalyticsDto} getActivityAnalyticsDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnalyticsApi
   */
  public getActivityAnalytics(
    getActivityAnalyticsDto: GetActivityAnalyticsDto,
    options?: AxiosRequestConfig,
  ) {
    return AnalyticsApiFp(this.configuration)
      .getActivityAnalytics(getActivityAnalyticsDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ApisApi - axios parameter creator
 * @export
 */
export const ApisApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id);
      const localVarPath = `/apis/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {CreateApiDto} createApiDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createApiDto: CreateApiDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createApiDto' is not null or undefined
      assertParamExists('create', 'createApiDto', createApiDto);
      const localVarPath = `/apis`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createApiDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/apis`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getById', 'id', id);
      const localVarPath = `/apis/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateApiDto} updateApiDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: string,
      updateApiDto: UpdateApiDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update', 'id', id);
      // verify required parameter 'updateApiDto' is not null or undefined
      assertParamExists('update', 'updateApiDto', updateApiDto);
      const localVarPath = `/apis/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateApiDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ApisApi - functional programming interface
 * @export
 */
export const ApisApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ApisApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {CreateApiDto} createApiDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createApiDto: CreateApiDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createApiDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAll(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateApiDto} updateApiDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: string,
      updateApiDto: UpdateApiDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        id,
        updateApiDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * ApisApi - factory interface
 * @export
 */
export const ApisApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ApisApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        ._delete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {CreateApiDto} createApiDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(createApiDto: CreateApiDto, options?: any): AxiosPromise<ApiDto> {
      return localVarFp
        .create(createApiDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll(options?: any): AxiosPromise<Array<ApiDto>> {
      return localVarFp
        .getAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): AxiosPromise<ApiDto> {
      return localVarFp
        .getById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateApiDto} updateApiDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      id: string,
      updateApiDto: UpdateApiDto,
      options?: any,
    ): AxiosPromise<ApiDto> {
      return localVarFp
        .update(id, updateApiDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ApisApi - interface
 * @export
 * @interface ApisApi
 */
export interface ApisApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApiInterface
   */
  _delete(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {CreateApiDto} createApiDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApiInterface
   */
  create(
    createApiDto: CreateApiDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ApiDto>;

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApiInterface
   */
  getAll(options?: AxiosRequestConfig): AxiosPromise<Array<ApiDto>>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApiInterface
   */
  getById(id: string, options?: AxiosRequestConfig): AxiosPromise<ApiDto>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateApiDto} updateApiDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApiInterface
   */
  update(
    id: string,
    updateApiDto: UpdateApiDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ApiDto>;
}

/**
 * ApisApi - object-oriented interface
 * @export
 * @class ApisApi
 * @extends {BaseAPI}
 */
export class ApisApi extends BaseAPI implements ApisApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return ApisApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CreateApiDto} createApiDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApi
   */
  public create(createApiDto: CreateApiDto, options?: AxiosRequestConfig) {
    return ApisApiFp(this.configuration)
      .create(createApiDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApi
   */
  public getAll(options?: AxiosRequestConfig) {
    return ApisApiFp(this.configuration)
      .getAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApi
   */
  public getById(id: string, options?: AxiosRequestConfig) {
    return ApisApiFp(this.configuration)
      .getById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateApiDto} updateApiDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApisApi
   */
  public update(
    id: string,
    updateApiDto: UpdateApiDto,
    options?: AxiosRequestConfig,
  ) {
    return ApisApiFp(this.configuration)
      .update(id, updateApiDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id);
      const localVarPath = `/applications/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {CreateApplicationDto} createApplicationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createApplicationDto: CreateApplicationDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createApplicationDto' is not null or undefined
      assertParamExists('create', 'createApplicationDto', createApplicationDto);
      const localVarPath = `/applications`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createApplicationDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/applications`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getById', 'id', id);
      const localVarPath = `/applications/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateApplicationDto} updateApplicationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: string,
      updateApplicationDto: UpdateApplicationDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update', 'id', id);
      // verify required parameter 'updateApplicationDto' is not null or undefined
      assertParamExists('update', 'updateApplicationDto', updateApplicationDto);
      const localVarPath = `/applications/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateApplicationDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ApplicationsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {CreateApplicationDto} createApplicationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createApplicationDto: CreateApplicationDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createApplicationDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAll(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ApplicationDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateApplicationDto} updateApplicationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: string,
      updateApplicationDto: UpdateApplicationDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        id,
        updateApplicationDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ApplicationsApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        ._delete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {CreateApplicationDto} createApplicationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createApplicationDto: CreateApplicationDto,
      options?: any,
    ): AxiosPromise<ApplicationDto> {
      return localVarFp
        .create(createApplicationDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll(options?: any): AxiosPromise<Array<ApplicationDto>> {
      return localVarFp
        .getAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): AxiosPromise<ApplicationDto> {
      return localVarFp
        .getById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateApplicationDto} updateApplicationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      id: string,
      updateApplicationDto: UpdateApplicationDto,
      options?: any,
    ): AxiosPromise<ApplicationDto> {
      return localVarFp
        .update(id, updateApplicationDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ApplicationsApi - interface
 * @export
 * @interface ApplicationsApi
 */
export interface ApplicationsApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApiInterface
   */
  _delete(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {CreateApplicationDto} createApplicationDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApiInterface
   */
  create(
    createApplicationDto: CreateApplicationDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ApplicationDto>;

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApiInterface
   */
  getAll(options?: AxiosRequestConfig): AxiosPromise<Array<ApplicationDto>>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApiInterface
   */
  getById(
    id: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ApplicationDto>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateApplicationDto} updateApplicationDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApiInterface
   */
  update(
    id: string,
    updateApplicationDto: UpdateApplicationDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<ApplicationDto>;
}

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi
  extends BaseAPI
  implements ApplicationsApiInterface
{
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return ApplicationsApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CreateApplicationDto} createApplicationDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApi
   */
  public create(
    createApplicationDto: CreateApplicationDto,
    options?: AxiosRequestConfig,
  ) {
    return ApplicationsApiFp(this.configuration)
      .create(createApplicationDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApi
   */
  public getAll(options?: AxiosRequestConfig) {
    return ApplicationsApiFp(this.configuration)
      .getAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApi
   */
  public getById(id: string, options?: AxiosRequestConfig) {
    return ApplicationsApiFp(this.configuration)
      .getById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateApplicationDto} updateApplicationDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplicationsApi
   */
  public update(
    id: string,
    updateApplicationDto: UpdateApplicationDto,
    options?: AxiosRequestConfig,
  ) {
    return ApplicationsApiFp(this.configuration)
      .update(id, updateApplicationDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OrganisationsApi - axios parameter creator
 * @export
 */
export const OrganisationsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id);
      const localVarPath = `/organisations/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {AddMemberDto} addMemberDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMember: async (
      id: string,
      addMemberDto: AddMemberDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('addMember', 'id', id);
      // verify required parameter 'addMemberDto' is not null or undefined
      assertParamExists('addMember', 'addMemberDto', addMemberDto);
      const localVarPath = `/organisations/{id}/add`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addMemberDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {CreateOrganisationDto} createOrganisationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createOrganisationDto: CreateOrganisationDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createOrganisationDto' is not null or undefined
      assertParamExists(
        'create',
        'createOrganisationDto',
        createOrganisationDto,
      );
      const localVarPath = `/organisations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrganisationDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/organisations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getById', 'id', id);
      const localVarPath = `/organisations/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {RemoveMemberDto} removeMemberDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMember: async (
      id: string,
      removeMemberDto: RemoveMemberDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('removeMember', 'id', id);
      // verify required parameter 'removeMemberDto' is not null or undefined
      assertParamExists('removeMember', 'removeMemberDto', removeMemberDto);
      const localVarPath = `/organisations/{id}/remove`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        removeMemberDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrganisationsApi - functional programming interface
 * @export
 */
export const OrganisationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    OrganisationsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {AddMemberDto} addMemberDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMember(
      id: string,
      addMemberDto: AddMemberDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganisationDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMember(
        id,
        addMemberDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {CreateOrganisationDto} createOrganisationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createOrganisationDto: CreateOrganisationDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganisationDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createOrganisationDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAll(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<OrganisationDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganisationDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {RemoveMemberDto} removeMemberDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMember(
      id: string,
      removeMemberDto: RemoveMemberDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganisationDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMember(
        id,
        removeMemberDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * OrganisationsApi - factory interface
 * @export
 */
export const OrganisationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OrganisationsApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        ._delete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {AddMemberDto} addMemberDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMember(
      id: string,
      addMemberDto: AddMemberDto,
      options?: any,
    ): AxiosPromise<OrganisationDto> {
      return localVarFp
        .addMember(id, addMemberDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {CreateOrganisationDto} createOrganisationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createOrganisationDto: CreateOrganisationDto,
      options?: any,
    ): AxiosPromise<OrganisationDto> {
      return localVarFp
        .create(createOrganisationDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll(options?: any): AxiosPromise<Array<OrganisationDto>> {
      return localVarFp
        .getAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): AxiosPromise<OrganisationDto> {
      return localVarFp
        .getById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {RemoveMemberDto} removeMemberDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMember(
      id: string,
      removeMemberDto: RemoveMemberDto,
      options?: any,
    ): AxiosPromise<OrganisationDto> {
      return localVarFp
        .removeMember(id, removeMemberDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OrganisationsApi - interface
 * @export
 * @interface OrganisationsApi
 */
export interface OrganisationsApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApiInterface
   */
  _delete(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {AddMemberDto} addMemberDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApiInterface
   */
  addMember(
    id: string,
    addMemberDto: AddMemberDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<OrganisationDto>;

  /**
   *
   * @summary
   * @param {CreateOrganisationDto} createOrganisationDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApiInterface
   */
  create(
    createOrganisationDto: CreateOrganisationDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<OrganisationDto>;

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApiInterface
   */
  getAll(options?: AxiosRequestConfig): AxiosPromise<Array<OrganisationDto>>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApiInterface
   */
  getById(
    id: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<OrganisationDto>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {RemoveMemberDto} removeMemberDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApiInterface
   */
  removeMember(
    id: string,
    removeMemberDto: RemoveMemberDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<OrganisationDto>;
}

/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */
export class OrganisationsApi
  extends BaseAPI
  implements OrganisationsApiInterface
{
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return OrganisationsApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {AddMemberDto} addMemberDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApi
   */
  public addMember(
    id: string,
    addMemberDto: AddMemberDto,
    options?: AxiosRequestConfig,
  ) {
    return OrganisationsApiFp(this.configuration)
      .addMember(id, addMemberDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CreateOrganisationDto} createOrganisationDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApi
   */
  public create(
    createOrganisationDto: CreateOrganisationDto,
    options?: AxiosRequestConfig,
  ) {
    return OrganisationsApiFp(this.configuration)
      .create(createOrganisationDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApi
   */
  public getAll(options?: AxiosRequestConfig) {
    return OrganisationsApiFp(this.configuration)
      .getAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApi
   */
  public getById(id: string, options?: AxiosRequestConfig) {
    return OrganisationsApiFp(this.configuration)
      .getById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {RemoveMemberDto} removeMemberDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationsApi
   */
  public removeMember(
    id: string,
    removeMemberDto: RemoveMemberDto,
    options?: AxiosRequestConfig,
  ) {
    return OrganisationsApiFp(this.configuration)
      .removeMember(id, removeMemberDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id);
      const localVarPath = `/permissions/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {CreatePermissionDto} createPermissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createPermissionDto: CreatePermissionDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createPermissionDto' is not null or undefined
      assertParamExists('create', 'createPermissionDto', createPermissionDto);
      const localVarPath = `/permissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPermissionDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/permissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getById', 'id', id);
      const localVarPath = `/permissions/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByScope: async (
      scope: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scope' is not null or undefined
      assertParamExists('getByScope', 'scope', scope);
      const localVarPath = `/permissions/scope/{scope}`.replace(
        `{${'scope'}}`,
        encodeURIComponent(String(scope)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdatePermissionDto} updatePermissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: string,
      updatePermissionDto: UpdatePermissionDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update', 'id', id);
      // verify required parameter 'updatePermissionDto' is not null or undefined
      assertParamExists('update', 'updatePermissionDto', updatePermissionDto);
      const localVarPath = `/permissions/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePermissionDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PermissionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {CreatePermissionDto} createPermissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createPermissionDto: CreatePermissionDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createPermissionDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAll(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PermissionDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getByScope(
      scope: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getByScope(
        scope,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdatePermissionDto} updatePermissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: string,
      updatePermissionDto: UpdatePermissionDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        id,
        updatePermissionDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PermissionsApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        ._delete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {CreatePermissionDto} createPermissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createPermissionDto: CreatePermissionDto,
      options?: any,
    ): AxiosPromise<PermissionDto> {
      return localVarFp
        .create(createPermissionDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll(options?: any): AxiosPromise<Array<PermissionDto>> {
      return localVarFp
        .getAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): AxiosPromise<PermissionDto> {
      return localVarFp
        .getById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByScope(scope: string, options?: any): AxiosPromise<PermissionDto> {
      return localVarFp
        .getByScope(scope, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdatePermissionDto} updatePermissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      id: string,
      updatePermissionDto: UpdatePermissionDto,
      options?: any,
    ): AxiosPromise<PermissionDto> {
      return localVarFp
        .update(id, updatePermissionDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PermissionsApi - interface
 * @export
 * @interface PermissionsApi
 */
export interface PermissionsApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApiInterface
   */
  _delete(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {CreatePermissionDto} createPermissionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApiInterface
   */
  create(
    createPermissionDto: CreatePermissionDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PermissionDto>;

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApiInterface
   */
  getAll(options?: AxiosRequestConfig): AxiosPromise<Array<PermissionDto>>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApiInterface
   */
  getById(
    id: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PermissionDto>;

  /**
   *
   * @summary
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApiInterface
   */
  getByScope(
    scope: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PermissionDto>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdatePermissionDto} updatePermissionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApiInterface
   */
  update(
    id: string,
    updatePermissionDto: UpdatePermissionDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PermissionDto>;
}

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI implements PermissionsApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return PermissionsApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CreatePermissionDto} createPermissionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApi
   */
  public create(
    createPermissionDto: CreatePermissionDto,
    options?: AxiosRequestConfig,
  ) {
    return PermissionsApiFp(this.configuration)
      .create(createPermissionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApi
   */
  public getAll(options?: AxiosRequestConfig) {
    return PermissionsApiFp(this.configuration)
      .getAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApi
   */
  public getById(id: string, options?: AxiosRequestConfig) {
    return PermissionsApiFp(this.configuration)
      .getById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} scope
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApi
   */
  public getByScope(scope: string, options?: AxiosRequestConfig) {
    return PermissionsApiFp(this.configuration)
      .getByScope(scope, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdatePermissionDto} updatePermissionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionsApi
   */
  public update(
    id: string,
    updatePermissionDto: UpdatePermissionDto,
    options?: AxiosRequestConfig,
  ) {
    return PermissionsApiFp(this.configuration)
      .update(id, updatePermissionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id);
      const localVarPath = `/roles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createRoleDto: CreateRoleDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createRoleDto' is not null or undefined
      assertParamExists('create', 'createRoleDto', createRoleDto);
      const localVarPath = `/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRoleDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getById', 'id', id);
      const localVarPath = `/roles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByName: async (
      name: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('getByName', 'name', name);
      const localVarPath = `/roles/name/{name}`.replace(
        `{${'name'}}`,
        encodeURIComponent(String(name)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateRoleDto} updateRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: string,
      updateRoleDto: UpdateRoleDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update', 'id', id);
      // verify required parameter 'updateRoleDto' is not null or undefined
      assertParamExists('update', 'updateRoleDto', updateRoleDto);
      const localVarPath = `/roles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRoleDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createRoleDto: CreateRoleDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createRoleDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAll(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getByName(
      name: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getByName(
        name,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateRoleDto} updateRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: string,
      updateRoleDto: UpdateRoleDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        id,
        updateRoleDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RolesApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        ._delete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(createRoleDto: CreateRoleDto, options?: any): AxiosPromise<RoleDto> {
      return localVarFp
        .create(createRoleDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll(options?: any): AxiosPromise<Array<RoleDto>> {
      return localVarFp
        .getAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): AxiosPromise<RoleDto> {
      return localVarFp
        .getById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByName(name: string, options?: any): AxiosPromise<RoleDto> {
      return localVarFp
        .getByName(name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateRoleDto} updateRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      id: string,
      updateRoleDto: UpdateRoleDto,
      options?: any,
    ): AxiosPromise<RoleDto> {
      return localVarFp
        .update(id, updateRoleDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RolesApi - interface
 * @export
 * @interface RolesApi
 */
export interface RolesApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApiInterface
   */
  _delete(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {CreateRoleDto} createRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApiInterface
   */
  create(
    createRoleDto: CreateRoleDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<RoleDto>;

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApiInterface
   */
  getAll(options?: AxiosRequestConfig): AxiosPromise<Array<RoleDto>>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApiInterface
   */
  getById(id: string, options?: AxiosRequestConfig): AxiosPromise<RoleDto>;

  /**
   *
   * @summary
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApiInterface
   */
  getByName(name: string, options?: AxiosRequestConfig): AxiosPromise<RoleDto>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateRoleDto} updateRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApiInterface
   */
  update(
    id: string,
    updateRoleDto: UpdateRoleDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<RoleDto>;
}

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI implements RolesApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CreateRoleDto} createRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public create(createRoleDto: CreateRoleDto, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .create(createRoleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public getAll(options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .getAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public getById(id: string, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .getById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public getByName(name: string, options?: AxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .getByName(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateRoleDto} updateRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public update(
    id: string,
    updateRoleDto: UpdateRoleDto,
    options?: AxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .update(id, updateRoleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('_delete', 'id', id);
      const localVarPath = `/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {AddRoleDto} addRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRole: async (
      id: string,
      addRoleDto: AddRoleDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('addRole', 'id', id);
      // verify required parameter 'addRoleDto' is not null or undefined
      assertParamExists('addRole', 'addRoleDto', addRoleDto);
      const localVarPath = `/users/{id}/add-role`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        addRoleDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createUserDto: CreateUserDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createUserDto' is not null or undefined
      assertParamExists('create', 'createUserDto', createUserDto);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByEmailOrUsername: async (
      identifier: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'identifier' is not null or undefined
      assertParamExists('getByEmailOrUsername', 'identifier', identifier);
      const localVarPath = `/users/search/{identifier}`.replace(
        `{${'identifier'}}`,
        encodeURIComponent(String(identifier)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getById', 'id', id);
      const localVarPath = `/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: string,
      updateUserDto: UpdateUserDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('update', 'id', id);
      // verify required parameter 'updateUserDto' is not null or undefined
      assertParamExists('update', 'updateUserDto', updateUserDto);
      const localVarPath = `/users/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {AddRoleDto} addRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addRole(
      id: string,
      addRoleDto: AddRoleDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addRole(
        id,
        addRoleDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createUserDto: CreateUserDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createUserDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAll(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getByEmailOrUsername(
      identifier: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getByEmailOrUsername(
          identifier,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getById(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getById(
        id,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: string,
      updateUserDto: UpdateUserDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        id,
        updateUserDto,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        ._delete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {AddRoleDto} addRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRole(
      id: string,
      addRoleDto: AddRoleDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .addRole(id, addRoleDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(createUserDto: CreateUserDto, options?: any): AxiosPromise<UserDto> {
      return localVarFp
        .create(createUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAll(options?: any): AxiosPromise<Array<UserDto>> {
      return localVarFp
        .getAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByEmailOrUsername(
      identifier: string,
      options?: any,
    ): AxiosPromise<Array<UserDto>> {
      return localVarFp
        .getByEmailOrUsername(identifier, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getById(id: string, options?: any): AxiosPromise<UserDto> {
      return localVarFp
        .getById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      id: string,
      updateUserDto: UpdateUserDto,
      options?: any,
    ): AxiosPromise<UserDto> {
      return localVarFp
        .update(id, updateUserDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  _delete(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {AddRoleDto} addRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  addRole(
    id: string,
    addRoleDto: AddRoleDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>;

  /**
   *
   * @summary
   * @param {CreateUserDto} createUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  create(
    createUserDto: CreateUserDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<UserDto>;

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getAll(options?: AxiosRequestConfig): AxiosPromise<Array<UserDto>>;

  /**
   *
   * @summary
   * @param {string} identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getByEmailOrUsername(
    identifier: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<UserDto>>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  getById(id: string, options?: AxiosRequestConfig): AxiosPromise<UserDto>;

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateUserDto} updateUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  update(
    id: string,
    updateUserDto: UpdateUserDto,
    options?: AxiosRequestConfig,
  ): AxiosPromise<UserDto>;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public _delete(id: string, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      ._delete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {AddRoleDto} addRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public addRole(
    id: string,
    addRoleDto: AddRoleDto,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .addRole(id, addRoleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CreateUserDto} createUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public create(createUserDto: CreateUserDto, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .create(createUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getAll(options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getByEmailOrUsername(
    identifier: string,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .getByEmailOrUsername(identifier, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getById(id: string, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id
   * @param {UpdateUserDto} updateUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public update(
    id: string,
    updateUserDto: UpdateUserDto,
    options?: AxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .update(id, updateUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
